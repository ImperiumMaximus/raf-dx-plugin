{
  "general": {
    "flags": {
      "loglevel": "logging level for this command invocation"
    },
    "errors": {
      "noOrgFound": "No org configuration found for name %s"
    },
    "infos": {
      "done": "done"
    }
  },
  "data": {
    "pull": {
      "description": "pulls data from an org",
      "flags": {
        "datastore": "File path of datastore.json with pull commands"
      },
      "errors": {
        "generalError": "Error while pulling from Org: %s"
      },
      "warns": {
        "datastoreEmpty": "Supplied datastore.json is empty!"
      },
      "infos": {
        "processingObject": "Processing %s...",
        "writingLines": "Writing %d lines"
      }
    },
    "push": {
      "description": "push data from an org",
      "flags": {
        "datastore": "File path of datastore.json with push commands"
      },
      "errors": {
        "generalError": "Error while pushing from Org: %s",
        "errorOnRow": "Error on row %s. Reason: %s"
      },
      "warns": {
        "datastoreEmpty": "Supplied datastore.json is empty!"
      },
      "infos": {
        "processingObject": "Processing %s...",
        "processedRecords": "%s %d records"
      }
    }
  },
  "metadata": {
    "delta": {
      "description": "Computes delta of the source folder considering only changed files (list can be for instance computed with git by comparing two branches or commits)",
      "flags": {
        "indeltacsv": "CSV file containing the list of changed files, one row per each file",
        "outsourcedir": "the output directory to store the delta-source files",
        "outmanifestdir": "the output directory to store the delta-manifest file (package.xml)",
        "rootdir": "the input directory that contains all the source files",
        "inmanifestdir": "the input manifest (package.xml) file describing the contents of the source files",
        "packagemappingfile": "the input json file of the describeMetadata() call (can be generated with sfdx force:mdapi:describemetadata)"
      },
      "infos": {
        "buildingDelta": "Building delta...",
        "calculatingDiffs": "(1/4) Calculating diffs on %d file(s)...",
        "buildingFiltMan": "(2/4) Building filtered manifest on %d metadata type(s)...",
        "copyingToTarget": "(3/4) Copying %d file(s) to target dir...",
        "writingFiltMan": "(4/4) Writing filtered manifest"
      },
      "multibars": {
        "total": "Total",
        "na": "N/A",
        "calculatingDiffs": "Calculating diffs...",
        "buildingFiltMan": "Building filtered manifest",
        "copyingToTarget": "Copying sources to target dir",
        "writingFiltMan": "Writing filtered manifest"
      }
    },
    "patch": {
      "description": "patches source metadata files in order to solve common Salesforce deployment bugs or for modifly on the fly API endpoints",
      "flags": {
        "outsourcedir": "the output directory to store the patched source files",
        "outmanifestdir": "the output directory to store the patched manifest file (package.xml)",
        "rootdir": "the input directory that contains the source files to be patched",
        "inmanifestdir": "the input manifest (package.xml) file describing the contents of the source files",
        "fixes": "file path of a JSON that describes the set of fixes and/or patches  to be made",
        "propfile": "file path o a key-value declaration to be loaded as part of the environment variables to be seen by the command"
      },
      "infos": {
        "executingDelLwc": "Executing task delLwc...",
        "executingPreDeployFixes": "Executing task preDeployFixes...",
        "executingFixUnfiledPublic": "Executing task fixEmailUnfiledPublicFolder...",
        "copyingToFolder": "Copying to %s",
        "inPlacePatch": "Patching in place"
      },
      "warns": {
        "missingFile": "Missing file %s/%s"
      }
    },
    "report": {
      "description": "produces a report in Excel format of all the metadata found in an Org",
      "flags": {
        "outfile": "file path where the results are stored"
      },
      "infos": {
        "processingMetadataType": "Processing Metadata Type \"%s\"..."
      },
      "errors": {
        "generalError": "Error while generating the report: %s"
      }
    }
  },
  "package": {
    "migrate": {
      "description": "migrate all installed packages from an Org to another Org",
      "flags": {
        "apexcompile": "compile all Apex in the org and package, or only Apex in the package; unlocked packages only",
        "targetorg": "Org Alias to which packages will be installed",
        "sourceorg": "Org Alias to which packages will be queried",
        "excludelist": "List of Package names to exclude"
      },
      "infos": {
        "workToBeDone": "Obtained %d packages from %s. Proceeding install..."
      },
      "errors": {
        "installError": "Problems installing the package %s"
      }
    }
  },
  "sharing": {
    "get": {
      "description": "Reads current OWD Sharing Settings for an Object in an Org",
      "flags": {
        "apiname": "API Name of the Salesforce Object",
        "targetorg": "Org from which the sharing settings will be read. If not specified default Org will be used."
      },
      "errors": {
        "noOrgFound": "No target Org specified and no default Org found"
      }
    }
  }
}
